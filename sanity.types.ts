/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Home = {
  _id: string;
  _type: "home";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  hero?: Hero;
  seo?: Seo;
};

export type Link = {
  _type: "link";
  text?: string;
  url?: string;
  is_external?: boolean;
};

export type Logo = {
  _type: "logo";
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "iimage";
  };
  url?: string;
  text?: string;
};

export type Config = {
  _id: string;
  _type: "config";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  site_name?: string;
  seo?: Site_seo;
  header?: Header;
  footer?: Footer;
};

export type Footer = {
  _type: "footer";
  footer_text?: string;
  menu?: Array<{
    _key: string;
  } & Link>;
  social_links?: Array<{
    _key: string;
  } & Link>;
};

export type Header = {
  _type: "header";
  logo?: Logo;
  menu?: Array<{
    _key: string;
  } & Link>;
  cta_button?: Link;
};

export type Site_seo = {
  _type: "site_seo";
  meta_title?: string;
  meta_description?: string;
  favicon?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "iimage";
  };
  open_graph_image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "iimage";
  };
  base_path?: string;
  sitemap_url?: string;
  indexable?: boolean;
  google_tag?: string;
  scripts?: Array<string>;
};

export type Hero = {
  _type: "hero";
  headline?: string;
  subheadline?: string;
  badge?: string;
  valueProps?: Array<{
    icon?: string;
    title?: string;
    description?: string;
    _key: string;
  }>;
  ctas?: Array<{
    label?: string;
    link?: string;
    variant?: string;
    _key: string;
  }>;
  trustIndicators?: Array<{
    icon?: string;
    text?: string;
    _key: string;
  }>;
  heroImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "iimage";
  };
  stats?: Array<{
    value?: string;
    label?: string;
    _key: string;
  }>;
};

export type Seo = {
  _type: "seo";
  meta_title?: string;
  meta_description?: string;
  keywords?: string;
  open_graph_image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "iimage";
  };
  indexable?: boolean;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  _type: "iimage";
  _key: string;
}>;

export type Iimage = {
  _type: "iimage";
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = Home | Link | Logo | Config | Footer | Header | Site_seo | Hero | Seo | BlockContent | Iimage | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/queries/home.ts
// Variable: HOME_QUERY
// Query: *[_type == "home"][0]{  _id,  hero {    headline,    subheadline,    badge,    valueProps[] {      icon,      title,      description    },    ctas[] {      label,      link,      variant    },    trustIndicators[] {      icon,      text    },    heroImage {      asset-> {        _id,        url,        metadata { lqip, dimensions }      },      alt    },    stats[] {      value,      label    }  },  seo {    meta_title,    meta_description,    keywords,    open_graph_image {      asset-> {        _id,        url      },      alt    },    indexable  }}
export type HOME_QUERYResult = {
  _id: string;
  hero: {
    headline: string | null;
    subheadline: string | null;
    badge: string | null;
    valueProps: Array<{
      icon: string | null;
      title: string | null;
      description: string | null;
    }> | null;
    ctas: Array<{
      label: string | null;
      link: string | null;
      variant: string | null;
    }> | null;
    trustIndicators: Array<{
      icon: string | null;
      text: string | null;
    }> | null;
    heroImage: {
      asset: {
        _id: string;
        url: string | null;
        metadata: {
          lqip: string | null;
          dimensions: SanityImageDimensions | null;
        } | null;
      } | null;
      alt: string | null;
    } | null;
    stats: Array<{
      value: string | null;
      label: string | null;
    }> | null;
  } | null;
  seo: {
    meta_title: string | null;
    meta_description: string | null;
    keywords: string | null;
    open_graph_image: {
      asset: {
        _id: string;
        url: string | null;
      } | null;
      alt: string | null;
    } | null;
    indexable: boolean | null;
  } | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n*[_type == \"home\"][0]{\n  _id,\n  hero {\n    headline,\n    subheadline,\n    badge,\n    valueProps[] {\n      icon,\n      title,\n      description\n    },\n    ctas[] {\n      label,\n      link,\n      variant\n    },\n    trustIndicators[] {\n      icon,\n      text\n    },\n    heroImage {\n      asset-> {\n        _id,\n        url,\n        metadata { lqip, dimensions }\n      },\n      alt\n    },\n    stats[] {\n      value,\n      label\n    }\n  },\n  seo {\n    meta_title,\n    meta_description,\n    keywords,\n    open_graph_image {\n      asset-> {\n        _id,\n        url\n      },\n      alt\n    },\n    indexable\n  }\n}\n": HOME_QUERYResult;
  }
}
